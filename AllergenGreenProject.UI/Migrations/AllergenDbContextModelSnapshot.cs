// <auto-generated />
using System;
using AllergenGreenProject.UI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AllergenGreenProject.UI.Migrations
{
    [DbContext(typeof(AllergenDbContext))]
    partial class AllergenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlergenProject.UI.Entities.Barkodlar", b =>
                {
                    b.Property<string>("BarkodNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UrunId")
                        .HasColumnType("int");

                    b.HasKey("BarkodNo");

                    b.HasIndex("UrunId");

                    b.ToTable("Barkodlars");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Kategoriler", b =>
                {
                    b.Property<int>("KategoriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategoriId"));

                    b.Property<string>("KategoriAdi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KategoriId");

                    b.ToTable("Kategorilers");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.KayitTipleri", b =>
                {
                    b.Property<int>("KayitTipiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KayitTipiId"));

                    b.Property<string>("KayitAdi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KayitTipiId");

                    b.ToTable("KayitTipleris");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.KullaniciVeFavoriler", b =>
                {
                    b.Property<int>("KullaniciId")
                        .HasColumnType("int");

                    b.Property<int>("UrunId")
                        .HasColumnType("int");

                    b.Property<int?>("KategoriId")
                        .HasColumnType("int");

                    b.HasKey("KullaniciId", "UrunId");

                    b.HasIndex("KategoriId");

                    b.HasIndex("UrunId");

                    b.ToTable("KullaniciVeFavorilers");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.KullaniciVeKaraListe", b =>
                {
                    b.Property<int>("KaraListeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KaraListeId"));

                    b.Property<int?>("IceriklerId")
                        .HasColumnType("int");

                    b.Property<int?>("KullaniciId")
                        .HasColumnType("int");

                    b.Property<int?>("UrunId")
                        .HasColumnType("int");

                    b.HasKey("KaraListeId");

                    b.HasIndex("IceriklerId");

                    b.HasIndex("KullaniciId");

                    b.HasIndex("UrunId");

                    b.ToTable("KullaniciVeKaraListes");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Kullanicilar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<int?>("KayitTipleriKayitTipiId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("KayitTipleriKayitTipiId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.ProgramIzinleri", b =>
                {
                    b.Property<int>("IzinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IzinId"));

                    b.Property<bool?>("Kamera")
                        .HasColumnType("bit");

                    b.Property<int?>("KullaniciId")
                        .HasColumnType("int");

                    b.HasKey("IzinId");

                    b.HasIndex("KullaniciId");

                    b.ToTable("ProgramIzinleris");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Riskler", b =>
                {
                    b.Property<int>("RiskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskId"));

                    b.Property<string>("RiskAdi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RiskId");

                    b.ToTable("Risklers");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Ureticiler", b =>
                {
                    b.Property<int>("UreticiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UreticiId"));

                    b.Property<string>("UreticiAdi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UreticiId");

                    b.ToTable("Ureticilers");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UreticiveUrunler", b =>
                {
                    b.Property<int>("UreticiId")
                        .HasColumnType("int");

                    b.Property<int>("UrunId")
                        .HasColumnType("int");

                    b.Property<int?>("KategoriId")
                        .HasColumnType("int");

                    b.HasKey("UreticiId", "UrunId");

                    b.HasIndex("KategoriId");

                    b.HasIndex("UrunId");

                    b.ToTable("UreticiveUrunlers");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UrunAramalar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BarkodNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarkodNoNavigationBarkodNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("KategoriId")
                        .HasColumnType("int");

                    b.Property<string>("UrunAdi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BarkodNoNavigationBarkodNo");

                    b.HasIndex("KategoriId");

                    b.ToTable("UrunAramalars");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UrunIcerikveRiskBilgileri", b =>
                {
                    b.Property<int>("IcerikId")
                        .HasColumnType("int");

                    b.Property<int>("RiskId")
                        .HasColumnType("int");

                    b.HasKey("IcerikId", "RiskId");

                    b.ToTable("UrunIcerikveRiskBilgileris");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UrunPaylasma", b =>
                {
                    b.Property<int>("PaylasmaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaylasmaId"));

                    b.Property<string>("PaylasmaTipi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UrunId")
                        .HasColumnType("int");

                    b.HasKey("PaylasmaId");

                    b.HasIndex("UrunId");

                    b.ToTable("UrunPaylasmas");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UrunRiskRenkleri", b =>
                {
                    b.Property<int>("RenkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RenkId"));

                    b.Property<string>("RenkAdi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RenkId");

                    b.ToTable("UrunRiskRenkleris");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UrunTakipleri", b =>
                {
                    b.Property<int>("TakipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TakipId"));

                    b.Property<int?>("KullaniciId")
                        .HasColumnType("int");

                    b.Property<bool?>("Revise")
                        .HasColumnType("bit");

                    b.Property<int?>("UrunId")
                        .HasColumnType("int");

                    b.HasKey("TakipId");

                    b.HasIndex("KullaniciId");

                    b.HasIndex("UrunId");

                    b.ToTable("UrunTakipleris");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UrunVeIcerikler", b =>
                {
                    b.Property<int>("IcerikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IcerikId"));

                    b.Property<int?>("KategoriId")
                        .HasColumnType("int");

                    b.Property<string>("KullanimKosullari")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UrunId")
                        .HasColumnType("int");

                    b.HasKey("IcerikId");

                    b.HasIndex("KategoriId");

                    b.HasIndex("UrunId");

                    b.ToTable("UrunVeIceriklers");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Urunler", b =>
                {
                    b.Property<int>("UrunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UrunId"));

                    b.Property<int>("KategoriId")
                        .HasColumnType("int");

                    b.Property<int>("UreticiId")
                        .HasColumnType("int");

                    b.Property<string>("UrunAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("UrunArkaYuzu")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UrunBarkod")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UrunIcerigi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("UrunOnYuzu")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UrunRiskRenkleri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UrunId");

                    b.HasIndex("KategoriId");

                    b.HasIndex("UreticiId");

                    b.HasIndex("UrunBarkod");

                    b.ToTable("Urunlers");
                });

            modelBuilder.Entity("AllergenGreenProject.UI.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PremiumUye",
                            NormalizedName = "PREMIUMUYE"
                        },
                        new
                        {
                            Id = 3,
                            Name = "NormalUye",
                            NormalizedName = "NORMALUYE"
                        });
                });

            modelBuilder.Entity("KullanicilarUrunler", b =>
                {
                    b.Property<int>("KullanicisId")
                        .HasColumnType("int");

                    b.Property<int>("UrunsUrunId")
                        .HasColumnType("int");

                    b.HasKey("KullanicisId", "UrunsUrunId");

                    b.HasIndex("UrunsUrunId");

                    b.ToTable("KullanicilarUrunler");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RisklerUrunler", b =>
                {
                    b.Property<int>("RisksRiskId")
                        .HasColumnType("int");

                    b.Property<int>("UrunsUrunId")
                        .HasColumnType("int");

                    b.HasKey("RisksRiskId", "UrunsUrunId");

                    b.HasIndex("UrunsUrunId");

                    b.ToTable("RisklerUrunler");
                });

            modelBuilder.Entity("UrunRiskRenkleriUrunler", b =>
                {
                    b.Property<int>("RenksRenkId")
                        .HasColumnType("int");

                    b.Property<int>("UrunsUrunId")
                        .HasColumnType("int");

                    b.HasKey("RenksRenkId", "UrunsUrunId");

                    b.HasIndex("UrunsUrunId");

                    b.ToTable("UrunRiskRenkleriUrunler");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Barkodlar", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Urunler", "Urun")
                        .WithMany("Barkodlars")
                        .HasForeignKey("UrunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.KullaniciVeFavoriler", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Kategoriler", "Kategori")
                        .WithMany("KullaniciVeFavorilers")
                        .HasForeignKey("KategoriId");

                    b.HasOne("AlergenProject.UI.Entities.Kullanicilar", "Kullanici")
                        .WithMany("KullaniciVeFavorilers")
                        .HasForeignKey("KullaniciId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AlergenProject.UI.Entities.Urunler", "Urun")
                        .WithMany("KullaniciVeFavorilers")
                        .HasForeignKey("UrunId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kategori");

                    b.Navigation("Kullanici");

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.KullaniciVeKaraListe", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.UrunVeIcerikler", "Icerikler")
                        .WithMany("KullaniciVeKaraListes")
                        .HasForeignKey("IceriklerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AlergenProject.UI.Entities.Kullanicilar", "Kullanici")
                        .WithMany("KullaniciVeKaraListes")
                        .HasForeignKey("KullaniciId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AlergenProject.UI.Entities.Urunler", "Urun")
                        .WithMany("KullaniciVeKaraListes")
                        .HasForeignKey("UrunId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Icerikler");

                    b.Navigation("Kullanici");

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Kullanicilar", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.KayitTipleri", null)
                        .WithMany("Kullanicilars")
                        .HasForeignKey("KayitTipleriKayitTipiId");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.ProgramIzinleri", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Kullanicilar", "Kullanici")
                        .WithMany("ProgramIzinleris")
                        .HasForeignKey("KullaniciId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Kullanici");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UreticiveUrunler", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Kategoriler", "Kategori")
                        .WithMany("UreticiveUrunlers")
                        .HasForeignKey("KategoriId");

                    b.HasOne("AlergenProject.UI.Entities.Ureticiler", "Uretici")
                        .WithMany("UreticiveUrunlers")
                        .HasForeignKey("UreticiId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AlergenProject.UI.Entities.Urunler", "Urun")
                        .WithMany("UreticiveUrunlers")
                        .HasForeignKey("UrunId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kategori");

                    b.Navigation("Uretici");

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UrunAramalar", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Barkodlar", "BarkodNoNavigation")
                        .WithMany()
                        .HasForeignKey("BarkodNoNavigationBarkodNo");

                    b.HasOne("AlergenProject.UI.Entities.Kategoriler", "Kategori")
                        .WithMany()
                        .HasForeignKey("KategoriId");

                    b.Navigation("BarkodNoNavigation");

                    b.Navigation("Kategori");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UrunIcerikveRiskBilgileri", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.UrunVeIcerikler", "Icerik")
                        .WithMany("UrunIcerikveRiskBilgileris")
                        .HasForeignKey("IcerikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Icerik");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UrunPaylasma", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Urunler", "Urun")
                        .WithMany("UrunPaylasmas")
                        .HasForeignKey("UrunId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UrunTakipleri", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Kullanicilar", "Kullanici")
                        .WithMany("UrunTakipleris")
                        .HasForeignKey("KullaniciId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AlergenProject.UI.Entities.Urunler", "Urun")
                        .WithMany("UrunTakipleris")
                        .HasForeignKey("UrunId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Kullanici");

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UrunVeIcerikler", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Kategoriler", "Kategori")
                        .WithMany("UrunVeIceriklers")
                        .HasForeignKey("KategoriId");

                    b.HasOne("AlergenProject.UI.Entities.Urunler", "Urun")
                        .WithMany("UrunVeIceriklers")
                        .HasForeignKey("UrunId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Kategori");

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Urunler", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Kategoriler", "Kategori")
                        .WithMany("Urunlers")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AlergenProject.UI.Entities.Ureticiler", "Uretici")
                        .WithMany("Urunlers")
                        .HasForeignKey("UreticiId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AlergenProject.UI.Entities.Barkodlar", "UrunBarkodNavigation")
                        .WithMany("Urunlers")
                        .HasForeignKey("UrunBarkod")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kategori");

                    b.Navigation("Uretici");

                    b.Navigation("UrunBarkodNavigation");
                });

            modelBuilder.Entity("KullanicilarUrunler", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Kullanicilar", null)
                        .WithMany()
                        .HasForeignKey("KullanicisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlergenProject.UI.Entities.Urunler", null)
                        .WithMany()
                        .HasForeignKey("UrunsUrunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("AllergenGreenProject.UI.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Kullanicilar", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Kullanicilar", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("AllergenGreenProject.UI.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlergenProject.UI.Entities.Kullanicilar", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Kullanicilar", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RisklerUrunler", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.Riskler", null)
                        .WithMany()
                        .HasForeignKey("RisksRiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlergenProject.UI.Entities.Urunler", null)
                        .WithMany()
                        .HasForeignKey("UrunsUrunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UrunRiskRenkleriUrunler", b =>
                {
                    b.HasOne("AlergenProject.UI.Entities.UrunRiskRenkleri", null)
                        .WithMany()
                        .HasForeignKey("RenksRenkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlergenProject.UI.Entities.Urunler", null)
                        .WithMany()
                        .HasForeignKey("UrunsUrunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Barkodlar", b =>
                {
                    b.Navigation("Urunlers");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Kategoriler", b =>
                {
                    b.Navigation("KullaniciVeFavorilers");

                    b.Navigation("UreticiveUrunlers");

                    b.Navigation("UrunVeIceriklers");

                    b.Navigation("Urunlers");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.KayitTipleri", b =>
                {
                    b.Navigation("Kullanicilars");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Kullanicilar", b =>
                {
                    b.Navigation("KullaniciVeFavorilers");

                    b.Navigation("KullaniciVeKaraListes");

                    b.Navigation("ProgramIzinleris");

                    b.Navigation("UrunTakipleris");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Ureticiler", b =>
                {
                    b.Navigation("UreticiveUrunlers");

                    b.Navigation("Urunlers");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.UrunVeIcerikler", b =>
                {
                    b.Navigation("KullaniciVeKaraListes");

                    b.Navigation("UrunIcerikveRiskBilgileris");
                });

            modelBuilder.Entity("AlergenProject.UI.Entities.Urunler", b =>
                {
                    b.Navigation("Barkodlars");

                    b.Navigation("KullaniciVeFavorilers");

                    b.Navigation("KullaniciVeKaraListes");

                    b.Navigation("UreticiveUrunlers");

                    b.Navigation("UrunPaylasmas");

                    b.Navigation("UrunTakipleris");

                    b.Navigation("UrunVeIceriklers");
                });
#pragma warning restore 612, 618
        }
    }
}
